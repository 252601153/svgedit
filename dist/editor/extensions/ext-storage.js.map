{"version":3,"file":"ext-storage.js","sources":["../../../src/editor/extensions/ext-storage.js"],"sourcesContent":["/**\n * @file ext-storage.js\n *\n * This extension allows automatic saving of the SVG canvas contents upon\n *  page unload (which can later be automatically retrieved upon future\n *  editor loads).\n *\n *  The functionality was originally part of the SVG Editor, but moved to a\n *  separate extension to make the setting behavior optional, and adapted\n *  to inform the user of its setting of local data.\n *\n * @license MIT\n *\n * @copyright 2010 Brett Zamir\n * @todo Revisit on whether to use `svgEditor.pref` over directly setting\n * `curConfig` in all extensions for a more public API (not only for `extPath`\n * and `imagePath`, but other currently used config in the extensions)\n * @todo We might provide control of storage settings through the UI besides the\n *   initial (or URL-forced) dialog. *\n*/\n\nexport default {\n  name: 'storage',\n  init ({$}) {\n    const svgEditor = this;\n    const svgCanvas = svgEditor.canvas;\n\n    // We could empty any already-set data for users when they decline storage,\n    //  but it would be a risk for users who wanted to store but accidentally\n    // said \"no\"; instead, we'll let those who already set it, delete it themselves;\n    // to change, set the \"emptyStorageOnDecline\" config setting to true\n    // in svgedit-config-iife.js/svgedit-config-es.js.\n    const {\n      emptyStorageOnDecline,\n      // When the code in svg-editor.js prevents local storage on load per\n      //  user request, we also prevent storing on unload here so as to\n      //  avoid third-party sites making XSRF requests or providing links\n      // which would cause the user's local storage not to load and then\n      // upon page unload (such as the user closing the window), the storage\n      //  would thereby be set with an empty value, erasing any of the\n      // user's prior work. To change this behavior so that no use of storage\n      // or adding of new storage takes place regardless of settings, set\n      // the \"noStorageOnLoad\" config setting to true in svgedit-config-*.js.\n      noStorageOnLoad,\n      forceStorage\n    } = svgEditor.curConfig;\n    const {storage, updateCanvas} = svgEditor;\n\n    /**\n     * Replace `storagePrompt` parameter within URL.\n     * @param {string} val\n     * @returns {void}\n     * @todo Replace the string manipulation with `searchParams.set`\n     */\n    function replaceStoragePrompt (val) {\n      val = val ? 'storagePrompt=' + val : '';\n      const loc = top.location; // Allow this to work with the embedded editor as well\n      if (loc.href.includes('storagePrompt=')) {\n        /*\n        loc.href = loc.href.replace(/(?<sep>[&?])storagePrompt=[^&]*(?<amp>&?)/, function (n0, sep, amp) {\n          return (val ? sep : '') + val + (!val && amp ? sep : (amp || ''));\n        });\n        */\n        loc.href = loc.href.replace(/([&?])storagePrompt=[^&]*(&?)/, function (n0, n1, amp) {\n          return (val ? n1 : '') + val + (!val && amp ? n1 : (amp || ''));\n        });\n      } else {\n        loc.href += (loc.href.includes('?') ? '&' : '?') + val;\n      }\n    }\n\n    /**\n     * Sets SVG content as a string with \"svgedit-\" and the current\n     *   canvas name as namespace.\n     * @param {string} val\n     * @returns {void}\n     */\n    function setSVGContentStorage (val) {\n      if (storage) {\n        const name = 'svgedit-' + svgEditor.curConfig.canvasName;\n        if (!val) {\n          storage.removeItem(name);\n        } else {\n          storage.setItem(name, val);\n        }\n      }\n    }\n\n    /**\n     * Set the cookie to expire.\n     * @param {string} cookie\n     * @returns {void}\n     */\n    function expireCookie (cookie) {\n      document.cookie = encodeURIComponent(cookie) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n    }\n\n    /**\n     * Expire the storage cookie.\n     * @returns {void}\n     */\n    function removeStoragePrefCookie () {\n      expireCookie('svgeditstore');\n    }\n\n    /**\n     * Empties storage for each of the current preferences.\n     * @returns {void}\n     */\n    function emptyStorage () {\n      setSVGContentStorage('');\n      Object.keys(svgEditor.curPrefs).forEach((name) => {\n        name = 'svg-edit-' + name;\n        if (storage) {\n          storage.removeItem(name);\n        }\n        expireCookie(name);\n      });\n    }\n\n    // emptyStorage();\n\n    /**\n    * Listen for unloading: If and only if opted in by the user, set the content\n    *   document and preferences into storage:\n    * 1. Prevent save warnings (since we're automatically saving unsaved\n    *       content into storage)\n    * 2. Use localStorage to set SVG contents (potentially too large to allow in cookies)\n    * 3. Use localStorage (where available) or cookies to set preferences.\n    * @returns {void}\n    */\n    function setupBeforeUnloadListener () {\n      window.addEventListener('beforeunload', function (e) {\n        // Don't save anything unless the user opted in to storage\n        if (!document.cookie.match(/(?:^|;\\s*)svgeditstore=(?:prefsAndContent|prefsOnly)/)) {\n          return;\n        }\n        if (document.cookie.match(/(?:^|;\\s*)svgeditstore=prefsAndContent/)) {\n          setSVGContentStorage(svgCanvas.getSvgString());\n        }\n\n        svgEditor.setConfig({no_save_warning: true}); // No need for explicit saving at all once storage is on\n        // svgEditor.showSaveWarning = false;\n\n        const {curPrefs} = svgEditor;\n\n        Object.entries(curPrefs).forEach(([key, val]) => {\n          const store = (val !== undefined);\n          key = 'svg-edit-' + key;\n          if (!store) {\n            return;\n          }\n          if (storage) {\n            storage.setItem(key, val);\n          } else if (window.widget) {\n            window.widget.setPreferenceForKey(val, key);\n          } else {\n            val = encodeURIComponent(val);\n            document.cookie = encodeURIComponent(key) + '=' + val + '; expires=Fri, 31 Dec 9999 23:59:59 GMT';\n          }\n        });\n      });\n    }\n\n    let loaded = false;\n    return {\n      name: 'storage',\n      async langReady ({importLocale}) {\n        const storagePrompt = new URL(top.location).searchParams.get('storagePrompt');\n\n        const confirmSetStorage = await importLocale();\n        const {\n          message, storagePrefsAndContent, storagePrefsOnly,\n          storagePrefs, storageNoPrefsOrContent, storageNoPrefs,\n          rememberLabel, rememberTooltip\n        } = confirmSetStorage;\n\n        // No need to run this one-time dialog again just because the user\n        //   changes the language\n        if (loaded) {\n          return;\n        }\n        loaded = true;\n\n        // Note that the following can load even if \"noStorageOnLoad\" is\n        //   set to false; to avoid any chance of storage, avoid this\n        //   extension! (and to avoid using any prior storage, set the\n        //   config option \"noStorageOnLoad\" to true).\n        if (!forceStorage && (\n          // If the URL has been explicitly set to always prompt the\n          //  user (e.g., so one can be pointed to a URL where one\n          // can alter one's settings, say to prevent future storage)...\n          storagePrompt === 'true' ||\n          (\n            // ...or...if the URL at least doesn't explicitly prevent a\n            //  storage prompt (as we use for users who\n            // don't want to set cookies at all but who don't want\n            // continual prompts about it)...\n            storagePrompt !== 'false' &&\n            // ...and this user hasn't previously indicated a desire for storage\n            !document.cookie.match(/(?:^|;\\s*)svgeditstore=(?:prefsAndContent|prefsOnly)/)\n          )\n          // ...then show the storage prompt.\n        )) {\n          const options = [];\n          if (storage) {\n            options.unshift(\n              {value: 'prefsAndContent', text: storagePrefsAndContent},\n              {value: 'prefsOnly', text: storagePrefsOnly},\n              {value: 'noPrefsOrContent', text: storageNoPrefsOrContent}\n            );\n          } else {\n            options.unshift(\n              {value: 'prefsOnly', text: storagePrefs},\n              {value: 'noPrefsOrContent', text: storageNoPrefs}\n            );\n          }\n\n          // Hack to temporarily provide a wide and high enough dialog\n          const oldContainerWidth = $('#dialog_container')[0].style.width,\n            oldContainerMarginLeft = $('#dialog_container')[0].style.marginLeft,\n            oldContentHeight = $('#dialog_content')[0].style.height,\n            oldContainerHeight = $('#dialog_container')[0].style.height;\n          $('#dialog_content')[0].style.height = '120px';\n          $('#dialog_container')[0].style.height = '170px';\n          $('#dialog_container')[0].style.width = '800px';\n          $('#dialog_container')[0].style.marginLeft = '-400px';\n\n          // Open select-with-checkbox dialog\n          // From svg-editor.js\n          svgEditor.storagePromptState = 'waiting';\n          const {response: pref, checked} = await $.select(\n            message,\n            options,\n            null,\n            null,\n            {\n              label: rememberLabel,\n              checked: true,\n              tooltip: rememberTooltip\n            }\n          );\n          if (pref && pref !== 'noPrefsOrContent') {\n            // Regardless of whether the user opted\n            // to remember the choice (and move to a URL which won't\n            // ask them again), we have to assume the user\n            // doesn't even want to remember their not wanting\n            // storage, so we don't set the cookie or continue on with\n            //  setting storage on beforeunload\n            document.cookie = 'svgeditstore=' + encodeURIComponent(pref) + '; expires=Fri, 31 Dec 9999 23:59:59 GMT'; // 'prefsAndContent' | 'prefsOnly'\n            // If the URL was configured to always insist on a prompt, if\n            //    the user does indicate a wish to store their info, we\n            //    don't want ask them again upon page refresh so move\n            //    them instead to a URL which does not always prompt\n            if (storagePrompt === 'true' && checked) {\n              replaceStoragePrompt();\n              return;\n            }\n          } else { // The user does not wish storage (or cancelled, which we treat equivalently)\n            removeStoragePrefCookie();\n            if (pref && // If the user explicitly expresses wish for no storage\n              emptyStorageOnDecline\n            ) {\n              emptyStorage();\n            }\n            if (pref && checked) {\n              // Open a URL which won't set storage and won't prompt user about storage\n              replaceStoragePrompt('false');\n              return;\n            }\n          }\n\n          // Reset width/height of dialog (e.g., for use by Export)\n          $('#dialog_container')[0].style.width = oldContainerWidth;\n          $('#dialog_container')[0].style.marginLeft = oldContainerMarginLeft;\n          $('#dialog_content')[0].style.height = oldContentHeight;\n          $('#dialog_container')[0].style.height = oldContainerHeight;\n\n          // It should be enough to (conditionally) add to storage on\n          //   beforeunload, but if we wished to update immediately,\n          //   we might wish to try setting:\n          //       svgEditor.setConfig({noStorageOnLoad: true});\n          //   and then call:\n          //       svgEditor.loadContentAndPrefs();\n\n          // We don't check for noStorageOnLoad here because\n          //   the prompt gives the user the option to store data\n          setupBeforeUnloadListener();\n\n          svgEditor.storagePromptState = 'closed';\n          updateCanvas(true);\n        } else if (!noStorageOnLoad || forceStorage) {\n          setupBeforeUnloadListener();\n        }\n      }\n    };\n  }\n};\n"],"names":["name","init","$","svgEditor","svgCanvas","canvas","curConfig","emptyStorageOnDecline","noStorageOnLoad","forceStorage","storage","updateCanvas","replaceStoragePrompt","val","loc","top","location","href","includes","replace","n0","n1","amp","setSVGContentStorage","canvasName","removeItem","setItem","expireCookie","cookie","document","encodeURIComponent","removeStoragePrefCookie","emptyStorage","Object","keys","curPrefs","forEach","setupBeforeUnloadListener","window","addEventListener","e","match","getSvgString","setConfig","no_save_warning","entries","key","store","undefined","widget","setPreferenceForKey","loaded","langReady","importLocale","storagePrompt","URL","searchParams","get","confirmSetStorage","message","storagePrefsAndContent","storagePrefsOnly","storagePrefs","storageNoPrefsOrContent","storageNoPrefs","rememberLabel","rememberTooltip","options","unshift","value","text","oldContainerWidth","style","width","oldContainerMarginLeft","marginLeft","oldContentHeight","height","oldContainerHeight","storagePromptState","select","label","checked","tooltip","pref","response"],"mappingsqBA,iBAAe;AACbA,EAAAA,IAAI,EAAE,SADO;AAEbC,EAAAA,IAFa,sBAEF;AAAA,QAAJC,CAAI,QAAJA,CAAI;AACT,QAAMC,SAAS,GAAG,IAAlB;AACA,QAAMC,SAAS,GAAGD,SAAS,CAACE,MAA5B,CAFS;AAKT;AACA;AACA;AACA;;AARS,+BAsBLF,SAAS,CAACG,SAtBL;AAAA,QAUPC,qBAVO,wBAUPA,qBAVO;AAAA,QAoBPC,eApBO,wBAoBPA,eApBO;AAAA,QAqBPC,YArBO,wBAqBPA,YArBO;AAAA,QAuBFC,OAvBE,GAuBuBP,SAvBvB,CAuBFO,OAvBE;AAAA,QAuBOC,YAvBP,GAuBuBR,SAvBvB,CAuBOQ,YAvBP;AAyBT;;;;;;;AAMA,aAASC,oBAAT,CAA+BC,GAA/B,EAAoC;AAClCA,MAAAA,GAAG,GAAGA,GAAG,GAAG,mBAAmBA,GAAtB,GAA4B,EAArC;AACA,UAAMC,GAAG,GAAGC,GAAG,CAACC,QAAhB,CAFkC;;AAGlC,UAAIF,GAAG,CAACG,IAAJ,CAASC,QAAT,CAAkB,gBAAlB,CAAJ,EAAyC;AACvC;;;;;AAKAJ,QAAAA,GAAG,CAACG,IAAJ,GAAWH,GAAG,CAACG,IAAJ,CAASE,OAAT,CAAiB,+BAAjB,EAAkD,UAAUC,EAAV,EAAcC,EAAd,EAAkBC,GAAlB,EAAuB;AAClF,iBAAO,CAACT,GAAG,GAAGQ,EAAH,GAAQ,EAAZ,IAAkBR,GAAlB,IAAyB,CAACA,GAAD,IAAQS,GAAR,GAAcD,EAAd,GAAoBC,GAAG,IAAI,EAApD,CAAP;AACD,SAFU,CAAX;AAGD,OATD,MASO;AACLR,QAAAA,GAAG,CAACG,IAAJ,IAAY,CAACH,GAAG,CAACG,IAAJ,CAASC,QAAT,CAAkB,GAAlB,IAAyB,GAAzB,GAA+B,GAAhC,IAAuCL,GAAnD;AACD;AACF;AAED;;;;;;;;AAMA,aAASU,oBAAT,CAA+BV,GAA/B,EAAoC;AAClC,UAAIH,OAAJ,EAAa;AACX,YAAMV,IAAI,GAAG,aAAaG,SAAS,CAACG,SAAV,CAAoBkB,UAA9C;;AACA,YAAI,CAACX,GAAL,EAAU;AACRH,UAAAA,OAAO,CAACe,UAAR,CAAmBzB,IAAnB;AACD,SAFD,MAEO;AACLU,UAAAA,OAAO,CAACgB,OAAR,CAAgB1B,IAAhB,EAAsBa,GAAtB;AACD;AACF;AACF;AAED;;;;;;;AAKA,aAASc,YAAT,CAAuBC,MAAvB,EAA+B;AAC7BC,MAAAA,QAAQ,CAACD,MAAT,GAAkBE,kBAAkB,CAACF,MAAD,CAAlB,GAA6B,0CAA/C;AACD;AAED;;;;;;AAIA,aAASG,uBAAT,GAAoC;AAClCJ,MAAAA,YAAY,CAAC,cAAD,CAAZ;AACD;AAED;;;;;;AAIA,aAASK,YAAT,GAAyB;AACvBT,MAAAA,oBAAoB,CAAC,EAAD,CAApB;AACAU,MAAAA,MAAM,CAACC,IAAP,CAAY/B,SAAS,CAACgC,QAAtB,EAAgCC,OAAhC,CAAwC,UAACpC,IAAD,EAAU;AAChDA,QAAAA,IAAI,GAAG,cAAcA,IAArB;;AACA,YAAIU,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACe,UAAR,CAAmBzB,IAAnB;AACD;;AACD2B,QAAAA,YAAY,CAAC3B,IAAD,CAAZ;AACD,OAND;AAOD,KA/FQ;;AAmGT;;;;;;;;;;;AASA,aAASqC,yBAAT,GAAsC;AACpCC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwC,UAAUC,CAAV,EAAa;AACnD;AACA,YAAI,CAACX,QAAQ,CAACD,MAAT,CAAgBa,KAAhB,CAAsB,sDAAtB,CAAL,EAAoF;AAClF;AACD;;AACD,YAAIZ,QAAQ,CAACD,MAAT,CAAgBa,KAAhB,CAAsB,wCAAtB,CAAJ,EAAqE;AACnElB,UAAAA,oBAAoB,CAACnB,SAAS,CAACsC,YAAV,EAAD,CAApB;AACD;;AAEDvC,QAAAA,SAAS,CAACwC,SAAV,CAAoB;AAACC,UAAAA,eAAe,EAAE;AAAlB,SAApB,EATmD;AAUnD;;AAVmD,YAY5CT,QAZ4C,GAYhChC,SAZgC,CAY5CgC,QAZ4C;AAcnDF,QAAAA,MAAM,CAACY,OAAP,CAAeV,QAAf,EAAyBC,OAAzB,CAAiC,iBAAgB;AAAA;AAAA,cAAdU,GAAc;AAAA,cAATjC,GAAS;;AAC/C,cAAMkC,KAAK,GAAIlC,GAAG,KAAKmC,SAAvB;AACAF,UAAAA,GAAG,GAAG,cAAcA,GAApB;;AACA,cAAI,CAACC,KAAL,EAAY;AACV;AACD;;AACD,cAAIrC,OAAJ,EAAa;AACXA,YAAAA,OAAO,CAACgB,OAAR,CAAgBoB,GAAhB,EAAqBjC,GAArB;AACD,WAFD,MAEO,IAAIyB,MAAM,CAACW,MAAX,EAAmB;AACxBX,YAAAA,MAAM,CAACW,MAAP,CAAcC,mBAAd,CAAkCrC,GAAlC,EAAuCiC,GAAvC;AACD,WAFM,MAEA;AACLjC,YAAAA,GAAG,GAAGiB,kBAAkB,CAACjB,GAAD,CAAxB;AACAgB,YAAAA,QAAQ,CAACD,MAAT,GAAkBE,kBAAkB,CAACgB,GAAD,CAAlB,GAA0B,GAA1B,GAAgCjC,GAAhC,GAAsC,yCAAxD;AACD;AACF,SAdD;AAeD,OA7BD;AA8BD;;AAED,QAAIsC,MAAM,GAAG,KAAb;AACA,WAAO;AACLnD,MAAAA,IAAI,EAAE,SADD;AAECoD,MAAAA,SAFD,4BAE4B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAfC,kBAAAA,YAAe,SAAfA,YAAe;AACzBC,kBAAAA,aADyB,GACT,IAAIC,GAAJ,CAAQxC,GAAG,CAACC,QAAZ,EAAsBwC,YAAtB,CAAmCC,GAAnC,CAAuC,eAAvC,CADS;AAAA;AAAA,yBAGCJ,YAAY,EAHb;;AAAA;AAGzBK,kBAAAA,iBAHyB;AAK7BC,kBAAAA,OAL6B,GAQ3BD,iBAR2B,CAK7BC,OAL6B,EAKpBC,sBALoB,GAQ3BF,iBAR2B,CAKpBE,sBALoB,EAKIC,gBALJ,GAQ3BH,iBAR2B,CAKIG,gBALJ,EAM7BC,YAN6B,GAQ3BJ,iBAR2B,CAM7BI,YAN6B,EAMfC,uBANe,GAQ3BL,iBAR2B,CAMfK,uBANe,EAMUC,cANV,GAQ3BN,iBAR2B,CAMUM,cANV,EAO7BC,aAP6B,GAQ3BP,iBAR2B,CAO7BO,aAP6B,EAOdC,eAPc,GAQ3BR,iBAR2B,CAOdQ,eAPc;AAW/B;;AAX+B,uBAY3Bf,MAZ2B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAe/BA,kBAAAA,MAAM,GAAG,IAAT,CAf+B;AAkB/B;AACA;AACA;;AApB+B,wBAqB3B,CAAC1C,YAAD;AAEF;AACA;AACA6C,kBAAAA,aAAa,KAAK,MAAlB;AAGE;AACA;AACA;AACAA,kBAAAA,aAAa,KAAK,OAAlB;AAEA,mBAACzB,QAAQ,CAACD,MAAT,CAAgBa,KAAhB,CAAsB,sDAAtB,CAZD;AAAA,mBArB2B;AAAA;AAAA;AAAA;;AAqCvB0B,kBAAAA,OArCuB,GAqCb,EArCa;;AAsC7B,sBAAIzD,OAAJ,EAAa;AACXyD,oBAAAA,OAAO,CAACC,OAAR,CACE;AAACC,sBAAAA,KAAK,EAAE,iBAAR;AAA2BC,sBAAAA,IAAI,EAAEV;AAAjC,qBADF,EAEE;AAACS,sBAAAA,KAAK,EAAE,WAAR;AAAqBC,sBAAAA,IAAI,EAAET;AAA3B,qBAFF,EAGE;AAACQ,sBAAAA,KAAK,EAAE,kBAAR;AAA4BC,sBAAAA,IAAI,EAAEP;AAAlC,qBAHF;AAKD,mBAND,MAMO;AACLI,oBAAAA,OAAO,CAACC,OAAR,CACE;AAACC,sBAAAA,KAAK,EAAE,WAAR;AAAqBC,sBAAAA,IAAI,EAAER;AAA3B,qBADF,EAEE;AAACO,sBAAAA,KAAK,EAAE,kBAAR;AAA4BC,sBAAAA,IAAI,EAAEN;AAAlC,qBAFF;AAID,mBAjD4B;;;AAoDvBO,kBAAAA,iBApDuB,GAoDHrE,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCC,KApD7B,EAqD3BC,sBArD2B,GAqDFxE,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCG,UArD9B,EAsD3BC,gBAtD2B,GAsDR1E,CAAC,CAAC,iBAAD,CAAD,CAAqB,CAArB,EAAwBsE,KAAxB,CAA8BK,MAtDtB,EAuD3BC,kBAvD2B,GAuDN5E,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCK,MAvD1B;AAwD7B3E,kBAAAA,CAAC,CAAC,iBAAD,CAAD,CAAqB,CAArB,EAAwBsE,KAAxB,CAA8BK,MAA9B,GAAuC,OAAvC;AACA3E,kBAAAA,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCK,MAAhC,GAAyC,OAAzC;AACA3E,kBAAAA,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCC,KAAhC,GAAwC,OAAxC;AACAvE,kBAAAA,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCG,UAAhC,GAA6C,QAA7C,CA3D6B;AA8D7B;;AACAxE,kBAAAA,SAAS,CAAC4E,kBAAV,GAA+B,SAA/B;AA/D6B;AAAA,yBAgEW7E,CAAC,CAAC8E,MAAF,CACtCrB,OADsC,EAEtCQ,OAFsC,EAGtC,IAHsC,EAItC,IAJsC,EAKtC;AACEc,oBAAAA,KAAK,EAAEhB,aADT;AAEEiB,oBAAAA,OAAO,EAAE,IAFX;AAGEC,oBAAAA,OAAO,EAAEjB;AAHX,mBALsC,CAhEX;;AAAA;AAAA;AAgEZkB,kBAAAA,IAhEY,mBAgEtBC,QAhEsB;AAgENH,kBAAAA,OAhEM,mBAgENA,OAhEM;;AAAA,wBA2EzBE,IAAI,IAAIA,IAAI,KAAK,kBA3EQ;AAAA;AAAA;AAAA;;AA4E3B;AACA;AACA;AACA;AACA;AACA;AACAvD,kBAAAA,QAAQ,CAACD,MAAT,GAAkB,kBAAkBE,kBAAkB,CAACsD,IAAD,CAApC,GAA6C,yCAA/D,CAlF2B;AAmF3B;AACA;AACA;AACA;;AAtF2B,wBAuFvB9B,aAAa,KAAK,MAAlB,IAA4B4B,OAvFL;AAAA;AAAA;AAAA;;AAwFzBtE,kBAAAA,oBAAoB;AAxFK;;AAAA;AAAA;AAAA;;AAAA;AA2FpB;AACPmB,kBAAAA,uBAAuB;;AACvB,sBAAIqD,IAAI;AACN7E,kBAAAA,qBADF,EAEE;AACAyB,oBAAAA,YAAY;AACb;;AAjG0B,wBAkGvBoD,IAAI,IAAIF,OAlGe;AAAA;AAAA;AAAA;;AAmGzB;AACAtE,kBAAAA,oBAAoB,CAAC,OAAD,CAApB;AApGyB;;AAAA;AAyG7B;AACAV,kBAAAA,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCC,KAAhC,GAAwCF,iBAAxC;AACArE,kBAAAA,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCG,UAAhC,GAA6CD,sBAA7C;AACAxE,kBAAAA,CAAC,CAAC,iBAAD,CAAD,CAAqB,CAArB,EAAwBsE,KAAxB,CAA8BK,MAA9B,GAAuCD,gBAAvC;AACA1E,kBAAAA,CAAC,CAAC,mBAAD,CAAD,CAAuB,CAAvB,EAA0BsE,KAA1B,CAAgCK,MAAhC,GAAyCC,kBAAzC,CA7G6B;AAgH7B;AACA;AACA;AACA;AACA;AAEA;AACA;;AACAzC,kBAAAA,yBAAyB;AAEzBlC,kBAAAA,SAAS,CAAC4E,kBAAV,GAA+B,QAA/B;AACApE,kBAAAA,YAAY,CAAC,IAAD,CAAZ;AA3H6B;AAAA;;AAAA;AA4HxB,sBAAI,CAACH,eAAD,IAAoBC,YAAxB,EAAsC;AAC3C4B,oBAAAA,yBAAyB;AAC1B;;AA9H8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+HhC;AAjII,KAAP;AAmID;AAnRY,CAAf;;;;"}